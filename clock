#!/bin/bash

state_dir="${XDG_STATE_HOME:-$HOME/.local/state}/clock"

args=$(getopt --name 'clock' --options 'e:h' --long 'edit:,help' -- "$@")

if [ $? -ne 0 ]; then
   echo 'Terminating...' >&2
   exit 1
fi

eval set -- "$args"
unset args

state_file="$state_dir/state.txt"
[ ! -e "$state_file" ] && mkdir -p "$state_dir" && touch "$state_file"

main() {
   options=()
   args=()
   parse_options "$@"

   local option="${options[0]}"
   unset options[0]

   case "$option" in
      'edit')
         edit "${args[0]}";;
      *);;
   esac
   
   local date_now=$(date '+%m-%d-%Y')
   local date_var=$(get_value 'date')

   if [ "$date_now" != "$date_var" ]; then
      set_value 'date' "$date_now"
      set_value 'stamp' $(get_stamp)
      wslview 'https://www.paycomonline.net/v4/ee/web.php/app/login'
   fi

   show_time

   [ "$date_now" == "$date_var" ] && clock_out
}

edit() {
   local stamp=$(get_stamp "$1")
   set_value 'stamp' "$stamp"
}

help() {
   local text="\
      Usage: clock [OPTION]...
      Manage clocking in and clocking out.

      Mandatory arguments to long options are mandatory for short options too.
        -e, --edit          edit the clock in time

      Exit Status:
       0  if OK,
       1  if minor problems (e.g., invalid option)."

   echo "$text" | sed 's/^\s\{6\}//g'
   exit 0
}

parse_options() {
   while [ -n "$1" ]; do
      case "$1" in
         '-h'|'--help')   
            help && break;;
         '-e'|'--edit')   
            options+=(edit)
            args=("${args[@]}" "$2")
            shift 2 && continue;;
         '--')
            shift && break;;
         *)
			   echo 'Internal error!' >&2
			   exit 1;;
      esac
   done
}

show_time () {
   local stamp=$(date -d "@$(get_value 'stamp')")
   date -d "$stamp +8 hours +30 minutes" '+%A %B %d %Y %I:%M%P' | sed 's/ 0/ /g'
}

get_value() {
   awk -F '=' "/$1/ {print \$2}" "$state_file" 2> /dev/null || echo
}

set_value() {
   if [[ -z "$(get_value $1)" ]]; then
      echo "$1=$2" >> "$state_file"
   else
      sed -i "/$1/s/=.\+/=$2/" "$state_file"
   fi   
}

get_stamp() {
   local now=$(date -d "now $1")
   local mins=$(date -d "$now" '+%M' | sed 's/^0//')
   local mod=$(($mins % 15))

   if [[ $mod -gt 2 ]]; then
      mod="+$((15 - $mod)) minutes"
   else
      mod="-$mod minutes"
   fi

   date -d "$now $mod" '+%s'
}

clock_out() {
   echo -n "Clock out? [y/(n)]: "
   read -n 1 -r ans 
   
   if [[ "$ans" == 'y' ]]; then
      wslview 'https://www.paycomonline.net/v4/ee/web.php/app/login'
   fi
}

main "$@"
